# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: ft-auth-service
# app and org for use with dashboard.serverless.com
app: ft-auth-app
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

package:
  individually: true

provider:
  name: aws
  runtime: python3.10
  region: ${env:THE_REGION} # ${opt:region, "ap-northeast-1"}
  stage: ${env:STAGE} # ${opt:stage, "dev"}
  iamRoleStatements:
  - Effect: Allow
    Action:
    - dynamodb:*
    Resource:
    - arn:aws:dynamodb:${env:THE_REGION}:${env:ACCOUNT_ID}:table/${env:TABLE_AUTH}
    - arn:aws:dynamodb:${env:THE_REGION}:${env:ACCOUNT_ID}:table/${env:TABLE_ACCOUNT}
    - arn:aws:dynamodb:${env:THE_REGION}:${env:ACCOUNT_ID}:table/${env:TABLE_ACCOUNT_INDEX}

  - Effect: Allow
    Action:
    - "s3:PutObject"
    - "s3:PutObjectAcl"
    - "s3:GetObject"
    - "s3:GetObjectAcl"
    - "s3:List*"
    - "s3:AbortMultipartUpload"
    Resource:
    - "arn:aws:s3:::${env:S3_BUCKET}"
    - "arn:aws:s3:::${env:S3_BUCKET}/*"

  - Effect: Allow
    Action:
    - ses:SendEmail
    Resource:
    - arn:aws:ses:${env:THE_REGION}:${env:ACCOUNT_ID}:identity/*
    - arn:aws:ses:${env:THE_REGION}:${env:ACCOUNT_ID}:configuration-set/*


custom:
  pythonRequirements:
    dockerizePip: true
    layer:
      name: ft-auth-service
      description: ForeignTeacher -> Auth Service
      compatibleRuntimes:
      - python3.10

functions:
  app:
    package:
      patterns:
      - "!requirements.txt"
      - "!package.json"
      - "!package-lock.json"
      - "!.serverless/**"
      - "!.venv/**"
      - "!node_modules/**"
      - "!__pycache__/**"
      - "!**/__pycache__/**"

    handler: main.handler
    environment:
      STAGE: ${self:provider.stage}
    layers:
    - {Ref: PythonRequirementsLambdaLayer}
    events:
    - http:
        method: any
        path: /{proxy+}

plugins:
- serverless-python-requirements
- serverless-dotenv-plugin
